/*
  Buttercup compiler - WebAssembly text file (Wat) code generator.
  Copyright (C) 2020-2021 Ariel Ortiz, ITESM CEM

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

using System;
using System.Text;
using System.Collections.Generic;

namespace Buttercup {

    class WatVisitor {

        IDictionary<string, Type> table;

        //-----------------------------------------------------------
        static readonly IDictionary<Type, string> PrintInstructions =
            new Dictionary<Type, string>() {
                { Type.BOOL, "print_bool" },
                { Type.INT, "print_int" }
            };

        public WatVisitor(IDictionary<string, Type> table) {
            this.table = table;
        }

        public string Visit(Program node) {
            return ";; WebAssembly text format code generated by "
                + "the buttercup compiler.\n\n"
                + "(module\n"
                + "  (import \"buttercup\" \"print_bool\" (func $print_bool (param i32)))\n"
                + "  (import \"buttercup\" \"print_int\" (func $print_int (param i32)))\n"
                + "  (func\n"
                + "    (export \"start\")\n"
                + "    (result i32)\n"
                + Visit((dynamic) node[0])
                + Visit((dynamic) node[1])
                + "    i32.const 0\n"
                + "  )\n"
                + ")\n";
        }

        //-----------------------------------------------------------
        public string Visit(DeclarationList node) {
            // The code for the local variable declarations is
            // generated directly from the symbol table, not from
            // the AST nodes.
            var sb = new StringBuilder();
            foreach (var entry in table) {
                sb.Append($"    (local ${entry.Key} i32)\n");
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        public string Visit(StatementList node) {
            return VisitChildren(node);
        }

        //-----------------------------------------------------------
        public string Visit(Assignment node) {
            return Visit((dynamic) node[0])
                + $"    local.set ${node.AnchorToken.Lexeme}\n";
        }

        //-----------------------------------------------------------
        public string Visit(Print node) {
            return Visit((dynamic) node[0])
                + $"    call ${PrintInstructions[node.ExpressionType]}\n";
        }

        //-----------------------------------------------------------
        public string Visit(If node) {
            return Visit((dynamic) node[0])
                + "    if\n"
                + Visit((dynamic) node[1])
                + "    end\n";
        }

        //-----------------------------------------------------------
        public string Visit(Identifier node) {
            return $"    local.get ${node.AnchorToken.Lexeme}\n";
        }

        //-----------------------------------------------------------
        public string Visit(IntLiteral node) {
            return $"    i32.const {node.AnchorToken.Lexeme}\n";
        }

        //-----------------------------------------------------------
        public string Visit(True node) {
            return "    i32.const 1\n";
        }

        //-----------------------------------------------------------
        public string Visit(False node) {
            return "    i32.const 0\n";
        }

        //-----------------------------------------------------------
        public string Visit(Neg node) {
            return "    i32.const 0\n"
                + Visit((dynamic) node[0])
                + "    i32.sub\n";
        }

        //-----------------------------------------------------------
        public string Visit(And node) {
            return VisitBinaryOperator("i32.and", node);
        }

        //-----------------------------------------------------------
        public string Visit(Less node) {
            return VisitBinaryOperator("i32.lt_s", node);
        }

        //-----------------------------------------------------------
        public string Visit(Plus node) {
            return VisitBinaryOperator("i32.add", node);
        }

        //-----------------------------------------------------------
        public string Visit(Mul node) {
            return VisitBinaryOperator("i32.mul", node);
        }

        //-----------------------------------------------------------
        string VisitChildren(Node node) {
            var sb = new StringBuilder();
            foreach (var n in node) {
                sb.Append(Visit((dynamic) n));
            }
            return sb.ToString();
        }

        //-----------------------------------------------------------
        string VisitBinaryOperator(string op, Node node) {
            return Visit((dynamic) node[0])
                + Visit((dynamic) node[1])
                + $"    {op}\n";
        }
    }
}
